#!/usr/bin/env python

import os
import sys

import lightning as L
import torchvision.transforms as T
import wandb
from config import get_config
from dataset import Amigos, FaceScrubTriplet
from lightning.pytorch.callbacks.early_stopping import EarlyStopping
from lightning.pytorch.callbacks.model_checkpoint import ModelCheckpoint
from lightning.pytorch.loggers import WandbLogger
from model import FaceLearnerTriplet
from torch.utils.data import DataLoader

WANDB_KEY = os.getenv("WANDB_KEY")

PREFIX = "/opt/ml/"
CHANNEL_NAME = "training"
INPUT_PATH = PREFIX + "input/data"

output_path = os.path.join(PREFIX, "output")
model_path = os.path.join(PREFIX, "model")
training_path = os.path.join(INPUT_PATH, CHANNEL_NAME)

cfg = get_config()


def train():
    transform_fn = T.Compose(
        [T.ToTensor(), T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]
    )

    train_ds = FaceScrubTriplet("/opt/ml/input/data/training", transforms=transform_fn)
    train_loader = DataLoader(
        train_ds, shuffle=True, batch_size=128, num_workers=2, persistent_workers=True
    )

    val_ds = Amigos("/opt/ml/input/data/training", transforms=transform_fn)
    val_loader = DataLoader(val_ds, shuffle=False, batch_size=1)

    model = FaceLearnerTriplet(cfg)

    early_stop_callback = EarlyStopping(
        monitor="train_loss", min_delta=1e-4, patience=10, verbose=False, mode="min"
    )
    checkpoint_callback = ModelCheckpoint(
        dirpath=model_path,
        filename="{epoch}-{train_loss:.2f}",
        monitor="train_loss",
        mode="min",
        save_top_k=1,
        save_last=True,
    )

    wandb.login(key=WANDB_KEY)
    wandb_logger = WandbLogger(
        project="visual-face-representation-learning",
        log_model="all",
    )

    trainer = L.Trainer(
        accelerator="cuda",
        num_sanity_val_steps=25,
        logger=wandb_logger,
        callbacks=[early_stop_callback, checkpoint_callback],
        enable_progress_bar=False,
        max_epochs=3,
    )
    trainer.fit(model, train_dataloaders=train_loader, val_dataloaders=val_loader)


if __name__ == "__main__":
    train()

    sys.exit(0)
