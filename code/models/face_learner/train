#!/usr/bin/env python

import os
import sys

import lightning as L
import torchvision.transforms as T
from lightning.pytorch.callbacks.early_stopping import EarlyStopping
from lightning.pytorch.callbacks.model_checkpoint import ModelCheckpoint
from torch.utils.data import DataLoader

from dataset import FaceScrub
from model import FaceLearner

PREFIX = '/opt/ml/'
CHANNEL_NAME = 'training'
INPUT_PATH = PREFIX + 'input/data'

output_path = os.path.join(PREFIX, 'output')
model_path = os.path.join(PREFIX, 'model')
training_path = os.path.join(INPUT_PATH, CHANNEL_NAME)

def train():
    transform_fn = T.Compose([
        T.ToTensor(),
        T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    train_ds = FaceScrub('/opt/ml/input/data/training', transforms=transform_fn)
    train_loader = DataLoader(
        train_ds,
        shuffle=True,
        batch_size=64,
        num_workers=2,
        persistent_workers=True
    )

    model = FaceLearner(2.)

    early_stop_callback = EarlyStopping(
        monitor="train_loss",
        min_delta=1e-4,
        patience=10,
        verbose=False,
        mode="min"
    )
    checkpoint_callback = ModelCheckpoint(
        dirpath=model_path,
        filename='{epoch}-{train_loss:.2f}',
        monitor='train_loss',
        mode='min',
        save_top_k=3,
        save_last=True
    )

    trainer = L.Trainer(
        accelerator='cuda',
        num_sanity_val_steps=10,
        callbacks=[early_stop_callback, checkpoint_callback],
        logger=False,
        enable_progress_bar=False,
        max_epochs=2
    )
    trainer.fit(model, train_dataloaders=train_loader)


if __name__ == '__main__':
    train()

    sys.exit(0)
